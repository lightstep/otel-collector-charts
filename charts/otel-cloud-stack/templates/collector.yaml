{{ $collectorList := concat .Values.collectors (list .Values.daemonCollector .Values.clusterCollector .Values.tracesCollector .Values.logsCollector ) }}
{{ range $_, $collector := $collectorList -}}
{{ if $collector.enabled }}
{{ $collectorName := (print $.Release.Name "-" $collector.name) }}
apiVersion: opentelemetry.io/v1alpha1
kind: OpenTelemetryCollector
metadata:
  name: "{{ $collectorName }}"
  {{- with $collector.annotations }}
  annotations:
    {{- toYaml . | nindent 4}}
  {{- end }}
  labels:
    app: {{ $collectorName }}
    {{- if and $.Values.opAMPBridge.enabled $.Values.opAMPBridge.addReportingLabel }}
    opentelemetry.io/opamp-reporting: "true"
    {{- else if and $.Values.opAMPBridge.enabled $.Values.opAMPBridge.addManagedLabel }}
    opentelemetry.io/opamp-managed: "true"
    {{- end }}
    {{- include "otel-cloud-stack.labels" $ | indent 4 }}
spec:
  {{- if $collector.additionalContainers }}
  additionalContainers:
    {{- $collector.additionalContainers | toYaml | nindent 4 }}
  {{- end }}
  {{- if $collector.nodeSelector }}
  nodeSelector:
    {{- $collector.nodeSelector | toYaml | nindent 4 }}
  {{- end }}
  {{- if $collector.tolerations }}
  tolerations:
    {{- $collector.tolerations | toYaml | nindent 4 }}
  {{- end }}
  mode: {{ $collector.mode }}
  image: {{ $collector.image }}
  {{- if not (eq $collector.mode "daemonset") }}
  replicas: {{ $collector.replicas | default 1 }}
  {{- end }}
  {{- with $collector.hpa }}
  {{- if .enabled }}
  autoscaler:
    minReplicas: {{ .minReplicas }}
    maxReplicas: {{ .maxReplicas }}
    targetMemoryUtilization: {{ .targetMemoryUtilization }}
    {{- if .targetCPUUtilization }}
    targetCPUUtilization: {{ .targetCPUUtilization }}
    {{- end }}
  {{- end }}
  {{- end }}
  {{- with $collector.podAnnotations }}
  podAnnotations:
    {{- toYaml . | nindent 4}}
  {{- end }}
{{- if $collector.targetallocator }}
{{- if $collector.targetallocator.enabled }}
  targetAllocator:
    enabled: true
    image: {{ $collector.targetallocator.image }}
    replicas: {{ $collector.targetallocator.replicas }}
    allocationStrategy: {{ $collector.targetallocator.allocationStrategy }}
    {{- if $collector.targetallocator.resources }}
    resources:
      {{- toYaml $collector.targetallocator.resources | nindent 6 }}
    {{- end }}
    {{- if $collector.targetallocator.filterStrategy }}
    filterStrategy: {{ $collector.targetallocator.filterStrategy }}
    {{- end }}
    {{- if $collector.targetallocator.prometheusCR.enabled }}
    prometheusCR:
      {{- with $collector.targetallocator.prometheusCR }}
      {{- toYaml .  | nindent 6 }}
      {{- end }}
    {{- end }}
{{- end }}
{{- end }}
  volumeMounts:
    {{- if $collector.mountHostFS }}
    # This is assuming the hostmetrics receiver/something is on.
    - name: hostfs
      mountPath: /hostfs
      readOnly: true
      mountPropagation: HostToContainer
    {{- end }}
    {{- if $collector.volumeMounts }}
      {{- toYaml $collector.volumeMounts | nindent 4 }}
    {{- end }}
  volumes:
    {{- if $collector.mountHostFS }}
    - name: hostfs
      hostPath:
        path: /
    {{- end }}
    {{- if $collector.volumes }}
      {{- toYaml $collector.volumes | nindent 4 }}
    {{ end }}
  env:
    {{- if or $collector.env $.Values.extraEnvs }}
    {{- toYaml (concat $.Values.extraEnvs $collector.env) | nindent 4 }}
    {{- end }}
    - name: K8S_NODE_NAME
      valueFrom:
        fieldRef:
          fieldPath: spec.nodeName
    - name: K8S_NODE_IP
      valueFrom:
        fieldRef:
          fieldPath: status.hostIP
    - name: K8S_NAMESPACE
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.namespace
    - name: K8S_POD_NAME
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.name
    - name: K8S_POD_UID
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: metadata.uid
    - name: K8S_POD_IP
      valueFrom:
        fieldRef:
          apiVersion: v1
          fieldPath: status.podIP
    - name: OTEL_RESOURCE_ATTRIBUTES
      {{- if (eq $collector.mode "daemonset") }}
      value: "k8s.cluster.name={{ $collector.clusterName | default $.Values.clusterName }},k8s.node.name=$(K8S_NODE_NAME)"
      {{- else }}
      value: "k8s.cluster.name={{ $collector.clusterName | default $.Values.clusterName }}"
      {{- end }}
  config: |
    {{- if $collector.config.extensions }}
    extensions:
       {{- toYaml $collector.config.extensions | nindent 6 }}
    {{- end }}
    exporters:
      {{- if $.Values.otlpDestinationOverride }}
      {{- if (dig "exporters" "otlp" "endpoint" false $collector.config) }}
      {{- $_ := set $collector.config.exporters.otlp "endpoint" $.Values.otlpDestinationOverride }}
      {{- end }}
      {{- end }}
      {{- toYaml $collector.config.exporters | nindent 6 }}
    receivers:
      {{- if $collector.scrape_configs_file }}
      prometheus/file:
        config:
          scrape_configs:
          {{- if $collector.scrape_configs_file }}
          {{ tpl ($.Files.Get $collector.scrape_configs_file) $ | nindent 10 }}
          {{- end }}
      {{- end }}
      {{- toYaml $collector.config.receivers | nindent 6 }}
    processors:
      {{- toYaml $collector.config.processors | nindent 6 }}
    service:
      {{- if $.Values.debug }}
      telemetry:
        logs:
          level: "debug"
      {{- end }}
      {{- toYaml $collector.config.service | nindent 6 }}
  resources:
    {{- toYaml $collector.resources | nindent 4 }}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: "{{ $collectorName }}"
rules:
- apiGroups: [""]
  resources:
  - events
  - namespaces
  - namespaces/status
  - nodes
  - nodes/stats
  - nodes/spec
  - nodes/proxy
  - nodes/metrics
  - services
  - resourcequotas
  - replicationcontrollers
  - replicationcontrollers/status
  - endpoints
  - persistentvolumes
  - persistentvolumeclaims
  - pods
  - pods/status
  verbs: ["get", "list", "watch"]
- apiGroups: ["monitoring.coreos.com"]
  resources:
  - servicemonitors
  - podmonitors
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- apiGroups:
  - apps
  resources:
  - daemonsets
  - deployments
  - replicasets
  - statefulsets
  verbs: ["get", "list", "watch"]
- apiGroups:
  - batch
  resources:
  - cronjobs
  - jobs
  verbs: ["get", "list", "watch"]
- apiGroups:
  - autoscaling
  resources:
  - horizontalpodautoscalers
  verbs: ["get", "list", "watch"]
- apiGroups:
  - networking.k8s.io
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- apiGroups: ["discovery.k8s.io"]
  resources:
  - endpointslices
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics", "/metrics/cadvisor"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: "{{ $collectorName }}"
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: "{{ $collectorName }}"
subjects:
- kind: ServiceAccount
  # quirk of the Operator
  name: "{{ $collectorName }}-collector"
  namespace: {{ $.Release.Namespace }}
---
{{ end }}
{{- end }}
