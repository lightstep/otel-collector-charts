# This is a sample OpenTelemetry Collector builder configuration file
# meant to be used by ServiceNow Cloud Observability customers in
# setting up gateway-mode telemetry collectors and sending to our SaaS
# using the new OTel-Arrow protocol.
#
# This configuration file describes the components that will be built
# into a custom OpenTelemetry collector.  For an overview of this
# process, see:
#
#   https://opentelemetry.io/docs/collector/custom-collector/
#
# Note: This is a relatively advanced operation, as it requires installing a Golang
# toolchain to execute and build the collector this way. When you have this file
# configured to your liking:
#
#   go install go.opentelemetry.io/collector/cmd/builder@latest
#   builder --config otelarrowcol-build.yaml
#
dist:
  # See https://github.com/open-telemetry/opentelemetry-collector/blob/main/cmd/builder/README.md
  # for more detail on these options.
  #
  # This is the name of the `go.mod` module file generated by the
  # builder, which may be visible in a CI/CD pipeline, for example.
  #
  #   module: github.com/myorg/telemetrygateway/dist
  #
  module: github.com/lightstep/otel-collector-charts/arrow/dist

  # the built collector artifact is placed in the `./dist` directory.
  output_path: dist/

  # The collector name shows in startup logs, for example, and other
  # internal telemetry (optional).  You may wish to use, e.g.,
  #
  #   name: myorgtelemetrygateway
  #   description: My Organization telemetry collector
  #
  name: otelarrowcol
  version: 0.27.0
  description: ServiceNow Cloud Observability OpenTelemetry Protocol with Apache Arrow gateway collector

  # This indicates which version of the core collector components as
  # well as the builder version.  At the time of this writing, we
  # recommend using at least the current release.
  otelcol_version: 0.111.0

# We recommend building in both the OTLP exporter and the OTel-Arrow
# exporter.
exporters:
  # This is the core OpenTelemetry Protocol with Apache Arrow exporter,
  # recommended for exporting to ServiceNow Cloud Observability using
  # either OTel-Arrow or standard OTLP over gRPC.
  - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/exporter/otelarrowexporter v0.111.0

  # The following components may be useful for debugging.

  # As an alternate to the OTel-Arrow exporter, we recommend building
  # with the core OTLP exporter as a fallback.  This component and the
  # OTel-Arrow exporter use compatible configuration.
  - gomod: go.opentelemetry.io/collector/exporter/otlpexporter v0.111.0

  # In case OTLP/HTTP export is required, as opposed to the two
  # gRPC options above.
  - gomod: go.opentelemetry.io/collector/exporter/otlphttpexporter v0.111.0

  # In case you want to record an OTLP telemetry session to a JSON
  # file, we recommend this additional utility.  See also the
  # obfuscation processor, listed below.  The OTel-Arrow provides
  # offline tools that can help explain poor compression performance
  # using inputs generated by this exporter, for example.
  - gomod: github.com/open-telemetry/otel-arrow/collector/exporter/fileexporter v0.25.0

  # The debug exporter, useful for printing telemetry to the console.
  - gomod: go.opentelemetry.io/collector/exporter/debugexporter v0.111.0

receivers:
  # The OTel-Arrow receiver supports multiple protocols including OTel-Arrow, OTLP gRPC,
  # OTLP HTTP/proto, and OTLP HTTP/json.  We recommend using this component to receive
  # OTLP (all forms) and OTel-Arrow in a single component.
  #
  # This enables other OTel Collectors or experimental SDKs that support OTel-Arrow to
  # send to this collector, such as this one for the OTel-Go Trace SDK:
  # https://github.com/lightstep/otel-launcher-go/tree/main/lightstep/sdk/trace/exporters/otlp/otelcol
  - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/otelarrowreceiver v0.111.0

  # To support receiving OTLP/HTTP.
  - gomod: go.opentelemetry.io/collector/receiver/otlpreceiver v0.111.0

  # You may wish to enable other receivers from the Collector-Contrib repository or
  # elsewhere.  Here are some that might be useful:
  #
  # - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/prometheusreceiver v0.111.0
  # - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/hostmetricsreceiver v0.111.0
  # - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/kubeletstatsreceiver v0.111.0
  # - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/receiver/k8sclusterreceiver v0.111.0

processors:
  # We recommend use of the OTel-Arrow concurrent batch processor.
  - gomod: github.com/open-telemetry/otel-arrow/collector/processor/concurrentbatchprocessor v0.25.0

  # We recommend building with the follow processor for obfuscation, in case you want to
  # record telemetry sessions for offline analysis.
  - gomod: github.com/open-telemetry/otel-arrow/collector/processor/obfuscationprocessor v0.25.0

  # We emphatically DO NOT recommend use of the memory limiter
  # processor or the core batch processor, i.e., do not build with
  # either of:
  # - go.opentelemetry.io/collector/processor/memorylimiterprocessor.
  # - gomod: go.opentelemetry.io/collector/processor/batchprocessor v0.111.0

  # These Collector-Contrib components are referred to in the charts in this package.
  - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/processor/resourcedetectionprocessor v0.111.0
  - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/processor/k8sattributesprocessor v0.111.0
  - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/processor/resourceprocessor v0.111.0
  - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/processor/metricstransformprocessor v0.111.0
  - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/processor/remotetapprocessor v0.111.0
  - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/processor/transformprocessor v0.111.0

  # ServiceNow recommends the probabilistic sampler processor in order to support
  # probability sampling in the collector pipieline.  This sampler component supports
  # OpenTelemetry sampling specifications that enable correctly adjusting counts, in
  # metrics derived from sampled spans.
  - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/processor/probabilisticsamplerprocessor v0.111.0

  # The tail sampling processor is included, by request.  Please note that this component
  # does not provide the necessary information to correctly adjust counts in metrics derived
  # from sampled spans.
  - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/processor/tailsamplingprocessor v0.111.0

  # You may be interested in other transform components in the
  # Collector-Contrib repository.  Here are some that might be useful:
  #
  # - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/processor/attributesprocessor v0.111.0

extensions:
  # You may be interested in externsions from the Collector-Contrib repository.  None are
  # required.  Here are some that might be useful:
  - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/extension/healthcheckextension v0.111.0
  - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/extension/pprofextension v0.111.0
  - gomod: github.com/open-telemetry/opentelemetry-collector-contrib/extension/opampextension v0.111.0

  # We do not support use of headersetterextension to apply the lightstep-access-token
  # header on a per-request basis.  Contact ServiceNow if you are interested in
  # multi-tenancy with OTel-Arrow.  Do not build with
  # github.com/open-telemetry/opentelemetry-collector-contrib/extension/headerssetterextension

providers:
  - gomod: go.opentelemetry.io/collector/confmap/provider/envprovider v1.17.0
  - gomod: go.opentelemetry.io/collector/confmap/provider/fileprovider v1.17.0
  - gomod: go.opentelemetry.io/collector/confmap/provider/httpprovider v1.17.0
  - gomod: go.opentelemetry.io/collector/confmap/provider/httpsprovider v1.17.0
  - gomod: go.opentelemetry.io/collector/confmap/provider/yamlprovider v1.17.0

# If you are building this collector in an Golang monorepo, or to apply security patches
# and other overrides to the go.mod file, use this section.
replaces:
  # For example:
  # - github.com/at-risk/code/module => github.com/at-risk/code/module v2.2.2
